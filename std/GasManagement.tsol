pragma ever-solidity ^0.64;

import "./Errors.tsol";
import "./Flags.tsol";

abstract contract GasManagement is Errors, Flags {

    // ****************************************************************
    // Contants
    // ****************************************************************
    uint128 constant DEFAULT_GAS_FLOOR = 25_000; // // 0.2500 EVERs currently. IMPORTANT! this is Gas amount, not EVER amount!!! Use $toValue() to get EVERs

    // ****************************************************************
    // Abstract
    // ****************************************************************
    function $gasFloor() virtual internal inline view returns (uint128 gasAmount);

    // ****************************************************************
    // Inlined Macros
    // ****************************************************************

    /// @notice Calculating real amount for paying needed gas
    function $toValue(uint128 gasAmount) internal inline pure returns (uint128) {
        return gasToValue(gasAmount, address(this).wid);
    }

    /// @notice Reserving constant amount of gas, so change return will pay correct sums
    function $reserve(uint128 gasAmount) internal inline pure {
        tvm.rawReserve($toValue(gasAmount), RSRV_POSSIBLE);
    }

    /// @notice Reserving constant amount of gas, so change return will pay correct sums
    function $requireGas(uint128 gasAmount) internal inline pure {
        require(msg.value >= $toValue(gasAmount), NOT_ENOUGH_VALUE);
    }

    /// @notice Sending all change to address
    /// @dev Usually, $gasFloor() should be reserved on balance before doing this
    function $sendChange(address to) internal inline pure {
        to.transfer(0, true, ALL_UNRESERVED + IGNORE_ERRORS);
    }

    // ****************************************************************
    // Modifiers
    // ****************************************************************

    /// @notice Reserves Gas using gasToValue of $gasFloor() constant amount
    modifier reserveGas {
        $reserve($gasFloor());
        _;
    }

    /// @notice Reserves Gas using gasToValue of provided Gas amount
    modifier reserveGasExactly(uint128 gasAmount) {
        $reserve(gasAmount);
        _;
    }

    /// @notice Checks message value against gasToValue of provided Gas amount
    modifier checkValue(uint128 gasAmount) {
        require(msg.value >= $toValue(gasAmount), NOT_ENOUGH_VALUE);
        _;
    }

    /// @notice Returns all balance of contract as a change (except reserved value)
    modifier returnAllUnreserved {
        _;
        $sendChange(msg.sender);
    }

    /// @notice Sends all balance of contract to provided address as a change (except reserved value)
    modifier returnAllUnreservedTo(address to) {
        _;
        $sendChange(to);
    }
}